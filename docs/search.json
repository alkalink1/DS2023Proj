[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  Group EDA",
    "section": "",
    "text": "3.1 Important Variables within this Dataset\nIt is important for strength and conditioning coaches to understand what kind of training and recovery plans their athletes need.\nEach position exerts different levels of player loads within practices and games, how do we ensure that each position is getting their optimal training and recovery in order to perform best in games and prevent injury?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#each-position-exerts-different-levels-of-player-loads-within-practices-and-games-how-do-we-ensure-that-each-position-is-getting-their-optimal-training-and-recovery-in-order-to-perform-best-in-games-and-prevent-injury",
    "href": "eda.html#each-position-exerts-different-levels-of-player-loads-within-practices-and-games-how-do-we-ensure-that-each-position-is-getting-their-optimal-training-and-recovery-in-order-to-perform-best-in-games-and-prevent-injury",
    "title": "3  Group EDA",
    "section": "",
    "text": "3.1.1 Important Variables within this Dataset\n\nTotal Player Load: Total physical effort during a session. This is important for our analysis to see how much work the athlete is doing overall. Player Load Per Minute: Effort per minute (intensity). This is important for our analysis to see the intensity/effort players are putting in. Higher pl per minute means they are most likely sprinting/exerting lots of energy which may take longer recovery. Explosive Efforts: Number of high-intensity movements. This is important because high intensity movements can cause strain on muscles leading to potential injuries. Session Total Jump: Total jumps in a session. This is important because positions that jump a lot may need more recovery due to the strain this puts on tendons. Especially since jumps are very frequent in basketball. Session Jumps Per Minute: Jumps per minute (jump intensity). This can identify positions that may be at risk for knee injury if they have a very high rate of jumps per minutes. Total IMA: Total number of movements (all intensities). This is important to analyze all movement and not just high intensity movement. IMA/Min: Number of movements per minute. This is important to track endurance by position. Position: This is important for our analysis to compare all of our variables against position.\n\n\n\n3.1.2 Cleaning the data\n\n# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\n\n\n# load data\nc1 = pd.read_csv('catapult season 1.csv')\nc2 = pd.read_csv('catapult season 2.csv')\n# merge the two seasons using concatonate ignoring their individual indexes\ndf = pd.concat([c1, c2], ignore_index=True)\n\n\n#check for duplicates\nduplicates = df.duplicated()\nprint(f\"Number of duplicates: {duplicates.sum()}\")\n#drop duplicates\ndf = df.drop_duplicates()\n#check for missing values\n\n#correct data types\nmissing_values = df.isnull().sum()\nprint(f\"Missing values: {missing_values}\")\n#drop missing values\ndf = df.dropna()\n#check data types\n\nNumber of duplicates: 0\nMissing values: Date                                0\nAbout                               0\nPosition                            0\nPeriod Number                       0\nPeriod                              0\nTotal Acceleration Efforts          0\nTotal Player Load                   0\nPlayer Load Per Minute              0\nIMA Accel Low                       0\nIMA Decel Low                       0\nIMA CoD Left Low                    0\nIMA CoD Right Low                   0\nIMA Accel Medium                    0\nIMA Decel Medium                    0\nIMA CoD Left Medium                 0\nIMA CoD Right Medium                0\nIMA Accel High                      0\nIMA Decel High                      0\nIMA Accel Total                     0\nIMA Decel Total                     0\nIMA CoD Left High                   0\nIMA CoD Right High                  0\nIMA Jump Count Low Band             0\nIMA Jump Count Med Band             0\nIMA Jump Count High Band            0\nExplosive Efforts                   0\nSession Total Jumps             26207\nSession Accel Low               26207\nSession Decel Low               26207\nSession CoD Left Low            26207\nSession CoD Right Low           26207\nSession Accel Med               26207\nSession Decel Medium            26207\nSession CoD Left Medium         26207\nSession CoD Right Medium        26207\nSession IMA Accel High          26207\nSession Decel High              26207\nSession CoD Left High           26207\nSession CoD Right High          26207\nSession IMA Accel Total         26207\nSession IMA Decel Total         26207\nSession Jump Count Low Band     26207\nSession Jump Count Med Band     26207\nSession Jump Count High Band    26207\nSession Total Jump              26207\nSession Jumps Per Minute        26207\nTotal CoD Left                  26207\nTotal CoD Right                 26207\nTotal High IMA                  26207\nTotal IMA                       26207\nIMA/Min                         28531\nevent-uuid                          0\ngroup-uuid                          0\ndtype: int64\n\n\n\n\n3.1.3 Descriptive Statistics & Distributions\n\nProvide summaries of important variables Use visualizations to explore distributions.\n\n\ndf['IMA CoD Low'] = df['IMA CoD Left Low'] + df['IMA CoD Right Low']\ndf['IMA CoD High'] = df['IMA CoD Left High'] + df['IMA CoD Right High']\ndf['IMA CoD Medium'] = df['IMA CoD Left Medium'] + df['IMA CoD Right Medium']\n#Generate summary statistics (mean, median, standard deviation, min/max, quartiles) for numerical variables\nnumeric = df.select_dtypes(include=[np.number])\nnumeric = numeric.drop(columns=['Period Number'])\nnumeric = numeric.dropna()\n\n# Create a new dataframe to store summary statistics\nsummary = pd.DataFrame()\n\n# Calculate summary statistics for each numeric column and add to the dataframe\nfor each in numeric.columns:\n    stats = numeric[each].describe()\n    summary[each] = stats\n\nsummary\n\n\n\n\n\n\n\n\nTotal Acceleration Efforts\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel Low\nIMA Decel Low\nIMA CoD Left Low\nIMA CoD Right Low\nIMA Accel Medium\nIMA Decel Medium\nIMA CoD Left Medium\n...\nSession Total Jump\nSession Jumps Per Minute\nTotal CoD Left\nTotal CoD Right\nTotal High IMA\nTotal IMA\nIMA/Min\nIMA CoD Low\nIMA CoD High\nIMA CoD Medium\n\n\n\n\ncount\n911.0\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n...\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n\n\nmean\n0.0\n148.872053\n5.655873\n14.117453\n29.589462\n37.023052\n40.778266\n3.543359\n8.064764\n7.373216\n...\n114.470911\n1.386937\n229.734358\n255.703622\n77.913282\n824.243688\n47.205060\n77.801317\n5.030735\n15.875960\n\n\nstd\n0.0\n86.035006\n1.713292\n12.664324\n23.690552\n34.791917\n36.251642\n4.476561\n8.909014\n9.734899\n...\n50.033823\n0.568696\n101.473635\n105.650637\n34.769415\n317.066287\n52.545666\n70.203308\n8.258671\n19.236498\n\n\nmin\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n0.0\n102.256000\n4.400000\n6.000000\n14.000000\n17.000000\n20.000000\n1.000000\n2.000000\n2.000000\n...\n79.500000\n0.970000\n167.000000\n188.000000\n54.000000\n621.000000\n21.085000\n38.000000\n1.000000\n5.000000\n\n\n50%\n0.0\n143.542000\n5.400000\n11.000000\n25.000000\n30.000000\n34.000000\n2.000000\n6.000000\n5.000000\n...\n108.000000\n1.320000\n237.000000\n267.000000\n78.000000\n862.000000\n31.370000\n65.000000\n3.000000\n11.000000\n\n\n75%\n0.0\n190.236500\n6.800000\n18.000000\n39.000000\n44.000000\n51.000000\n5.000000\n10.000000\n9.000000\n...\n141.500000\n1.750000\n295.000000\n329.000000\n101.000000\n1034.500000\n42.675000\n94.000000\n5.000000\n19.000000\n\n\nmax\n0.0\n534.156000\n12.700000\n110.000000\n223.000000\n252.000000\n302.000000\n43.000000\n65.000000\n70.000000\n...\n329.000000\n4.750000\n549.000000\n603.000000\n202.000000\n1857.000000\n310.430000\n545.000000\n61.000000\n129.000000\n\n\n\n\n8 rows × 49 columns\n\n\n\n\n#Create visualizations such as histograms, boxplots, or density plots to explore the distribution of key numerical variables.\n\n#data frame with key variables\nkey = df[['Player Load Per Minute', 'Session Total Jumps', 'Explosive Efforts', 'Total Player Load']]\nplt.figure(figsize=(10, 6))\n\n#Plotting distribution of Player Load Per Minute\nsns.histplot(df['Player Load Per Minute'], bins=30, kde=True)\nplt.title('Distribution of Player Load Per Minute')\n\nplt.figure(figsize=(10, 6))\n\n# correlation with player load and position\nsns.histplot(df, x=\"Player Load Per Minute\", hue=\"Position\", element=\"step\", common_norm=False)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.4 Examine Correlations (if relevant)\n\nInterpret findings: what variables appear related?\n\n\n#Use correlation matrices, scatterplots, or other techniques to assess relationships between numerical variables.\n\n#correlation matrix\n\n#creating correlation based on key variables\ncorr = key.corr()\nplt.figure(figsize=(10, 6))\n#plotting heatmap to understand correlation\n#seems that tpl and explosive efforts are highly correlated\n\nplt.figure(figsize=(10, 6))\nsns.regplot(x='Total Player Load', y='Explosive Efforts', data=key, scatter_kws={'color': 'darkblue'}, line_kws={'color': 'red'})\n#seems to be a linear relationship, which makes sense as more effort in explosive efforts would also increase total player load\n\n&lt;Figure size 960x576 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n3.1.5 Explore Relationships (if relevant)\n\nDig into potential causal or descriptive relationships\n\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Total Player Load\", data=df)\nplt.title(\"Player Loads by Position\")\nplt.show()\n\n\n\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Explosive Efforts\", data=df)\nplt.title(\"Explosive Efforts by Position\")\nplt.show()\n\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Total Player Load\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Total Player Load by Position\", y=1.02)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#important-variables-within-this-dataset",
    "href": "eda.html#important-variables-within-this-dataset",
    "title": "3  Group EDA",
    "section": "",
    "text": "Total Player Load: Total physical effort during a session. This is important for our analysis to see how much work the athlete is doing overall.\nPlayer Load Per Minute: Effort per minute (intensity). This is important for our analysis to see the intensity/effort players are putting in. Higher pl per minute means they are most likely sprinting/exerting lots of energy which may take longer recovery.\nExplosive Efforts: Number of high-intensity movements. This is important because high intensity movements can cause strain on muscles leading to potential injuries.\nSession Total Jump: Total jumps in a session. This is important because positions that jump a lot may need more recovery due to the strain this puts on tendons. Especially since jumps are very frequent in basketball.\nSession Jumps Per Minute: Jumps per minute (jump intensity). This can identify positions that may be at risk for knee injury if they have a very high rate of jumps per minutes.\nTotal IMA: Total number of movements (all intensities). This is important to analyze all movement and not just high intensity movement.\nIMA/Min: Number of movements per minute. This is important to track endurance by position.\nPosition: This is important for our analysis to compare all of our variables against position.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#cleaning-the-data",
    "href": "eda.html#cleaning-the-data",
    "title": "3  Group EDA",
    "section": "3.2 Cleaning the data",
    "text": "3.2 Cleaning the data\n\n# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport scipy as sp\n\n\n# load data\nc1 = pd.read_csv('catapult season 1.csv')\nc2 = pd.read_csv('catapult season 2.csv')\n# merge the two seasons using concatonate ignoring their individual indexes\ndf = pd.concat([c1, c2], ignore_index=True)\n\n\n#check for duplicates\nduplicates = df.duplicated()\nprint(f\"Number of duplicates: {duplicates.sum()}\")\n#drop duplicates\ndf = df.drop_duplicates()\n#check for missing values\n\n#correct data types\nmissing_values = df.isnull().sum()\n#drop missing values\ndf = df.dropna()\n#check data types\nkey_vars = [\n    'Total Player Load', 'Player Load Per Minute', 'Explosive Efforts', 'Session Total Jump', 'Session Jumps Per Minute', 'Total IMA', 'IMA/Min', 'Position'\n]\ndf = df[key_vars]\n\nNumber of duplicates: 0",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#descriptive-statistics-distributions",
    "href": "eda.html#descriptive-statistics-distributions",
    "title": "3  Group EDA",
    "section": "3.3 Descriptive Statistics & Distributions",
    "text": "3.3 Descriptive Statistics & Distributions\n\n#Generate summary statistics (mean, median, standard deviation, min/max, quartiles) for numerical variables\nnumeric = df.select_dtypes(include=[np.number])\n#numeric = numeric.drop(columns=['Period Number'])\nnumeric = numeric.dropna()\n\n# Create a new dataframe to store summary statistics\nsummary = pd.DataFrame()\n# Calculate summary statistics for each numeric column and add to the dataframe\nfor each in numeric.columns:\n    stats = numeric[each].describe()\n    summary[each] = stats\n\nsummary\n\n\n\n\n\n\n\n\nTotal Player Load\nPlayer Load Per Minute\nExplosive Efforts\nSession Total Jump\nSession Jumps Per Minute\nTotal IMA\nIMA/Min\n\n\n\n\ncount\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n911.000000\n\n\nmean\n148.872053\n5.655873\n10.508233\n114.470911\n1.386937\n824.243688\n47.205060\n\n\nstd\n86.035006\n1.713292\n15.071248\n50.033823\n0.568696\n317.066287\n52.545666\n\n\nmin\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n102.256000\n4.400000\n2.000000\n79.500000\n0.970000\n621.000000\n21.085000\n\n\n50%\n143.542000\n5.400000\n6.000000\n108.000000\n1.320000\n862.000000\n31.370000\n\n\n75%\n190.236500\n6.800000\n11.000000\n141.500000\n1.750000\n1034.500000\n42.675000\n\n\nmax\n534.156000\n12.700000\n103.000000\n329.000000\n4.750000\n1857.000000\n310.430000\n\n\n\n\n\n\n\n\n#Create visualizations such as histograms, boxplots, or density plots to explore the distribution of key numerical variables.\nnumeric_df = df.select_dtypes(include=['number'])\n\n# Create correlation matrix\nplt.figure(figsize=(12, 8))\ncorr = numeric_df.corr()\nsns.heatmap(corr, cmap='coolwarm', annot=False, linewidths=0.5)\nplt.title('Correlation Matrix')\nplt.show()\n\nplt.figure(figsize=(10, 6))\n#Plotting distribution of Player Load Per Minute\nsns.histplot(df['Player Load Per Minute'], bins=30, kde=True)\nplt.title('Distribution of Player Load Per Minute')\nplt.show()\nplt.figure(figsize=(10, 6))\n\n# correlation with player load and position\nsns.histplot(df, x=\"Player Load Per Minute\", hue=\"Position\", element=\"step\", common_norm=False)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#examine-correlations",
    "href": "eda.html#examine-correlations",
    "title": "3  Group EDA",
    "section": "3.4 Examine Correlations",
    "text": "3.4 Examine Correlations\n\nInterpret findings: what variables appear related?\n\n\n#seems that tpl and explosive efforts are highly correlated\nplt.figure(figsize=(10, 6))\nsns.regplot(x='Total Player Load', y='Explosive Efforts', data=df, scatter_kws={'color': 'darkblue'}, line_kws={'color': 'red'})\n#seems to be a linear relationship, which makes sense as more effort in explosive efforts would also increase total player load",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#explore-relationships",
    "href": "eda.html#explore-relationships",
    "title": "3  Group EDA",
    "section": "3.5 Explore Relationships",
    "text": "3.5 Explore Relationships\n\nDig into potential causal or descriptive relationships\n\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Total Player Load\", data=df)\nplt.title(\"Player Loads by Position\")\nplt.show()\n\nplt.figure(figsize=(8,6))\nsns.boxplot(x=\"Position\", y=\"Explosive Efforts\", data=df)\nplt.title(\"Explosive Efforts by Position\")\nplt.show()\n\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Total Player Load\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Total Player Load by Position\", y=1.02)\nplt.show()\n\nplot = sns.FacetGrid(df, col=\"Position\", col_wrap=3, sharex=True, sharey=True)\nplot.map(plt.hist, \"Player Load Per Minute\", bins=30, color=\"lightblue\", edgecolor=\"black\")\nplot.fig.suptitle(\"Histogram of Player Load per Minute by Position\", y=1.02)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Group EDA</span>"
    ]
  }
]